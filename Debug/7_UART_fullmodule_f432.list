
7_UART_fullmodule_f432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000de4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001004  08001004  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001004  08001004  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001004  08001004  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001004  08001004  00011004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001008  08001008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800100c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000038  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b69  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000784  00000000  00000000  00022bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00023388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000108  00000000  00000000  000234d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c087  00000000  00000000  000235e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018dd  00000000  00000000  0003f667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098ebe  00000000  00000000  00040f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d9e02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a94  00000000  00000000  000d9e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000064 	.word	0x20000064
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000f78 	.word	0x08000f78

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000068 	.word	0x20000068
 80001e8:	08000f78 	.word	0x08000f78

080001ec <main>:
#include "uart.h"

__IO uint8_t	key;

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	RCC->AHB1ENR	|=	RCC_AHB1ENR_GPIOEEN;
 80001f0:	4b19      	ldr	r3, [pc, #100]	; (8000258 <main+0x6c>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <main+0x6c>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOE->MODER	|=	GPIO_MODER_MODE5_0;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <main+0x70>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <main+0x70>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6013      	str	r3, [r2, #0]
	GPIOE->MODER	&=	~GPIO_MODER_MODE5_1;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <main+0x70>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a13      	ldr	r2, [pc, #76]	; (800025c <main+0x70>)
 800020e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000212:	6013      	str	r3, [r2, #0]

	uart1_rxtx_init();
 8000214:	f000 f8dc 	bl	80003d0 <uart1_rxtx_init>

	while(1)
	{
		key = uart1_read();
 8000218:	f000 f94c 	bl	80004b4 <uart1_read>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <main+0x74>)
 8000222:	701a      	strb	r2, [r3, #0]
		if(key=='1')
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <main+0x74>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b31      	cmp	r3, #49	; 0x31
 800022c:	d109      	bne.n	8000242 <main+0x56>
		{
			GPIOE->BSRR	|=	GPIO_BSRR_BS5;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x70>)
 8000230:	699b      	ldr	r3, [r3, #24]
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <main+0x70>)
 8000234:	f043 0320 	orr.w	r3, r3, #32
 8000238:	6193      	str	r3, [r2, #24]
			printf("SEX\r\n");
 800023a:	480a      	ldr	r0, [pc, #40]	; (8000264 <main+0x78>)
 800023c:	f000 fa44 	bl	80006c8 <puts>
 8000240:	e7ea      	b.n	8000218 <main+0x2c>
		}
		else
		{
			GPIOE->BSRR	|=	GPIO_BSRR_BR5;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <main+0x70>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <main+0x70>)
 8000248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800024c:	6193      	str	r3, [r2, #24]
			printf("NO SEX\r\n");
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x7c>)
 8000250:	f000 fa3a 	bl	80006c8 <puts>
		key = uart1_read();
 8000254:	e7e0      	b.n	8000218 <main+0x2c>
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40021000 	.word	0x40021000
 8000260:	2000008c 	.word	0x2000008c
 8000264:	08000f90 	.word	0x08000f90
 8000268:	08000f98 	.word	0x08000f98

0800026c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	e00a      	b.n	8000294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800027e:	f3af 8000 	nop.w
 8000282:	4601      	mov	r1, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1c5a      	adds	r2, r3, #1
 8000288:	60ba      	str	r2, [r7, #8]
 800028a:	b2ca      	uxtb	r2, r1
 800028c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	3301      	adds	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	dbf0      	blt.n	800027e <_read+0x12>
	}

return len;
 800029c:	687b      	ldr	r3, [r7, #4]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b086      	sub	sp, #24
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	60f8      	str	r0, [r7, #12]
 80002ae:	60b9      	str	r1, [r7, #8]
 80002b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e009      	b.n	80002cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	60ba      	str	r2, [r7, #8]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f877 	bl	80003b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbf1      	blt.n	80002b8 <_write+0x12>
	}
	return len;
 80002d4:	687b      	ldr	r3, [r7, #4]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <_close>:

int _close(int file)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
	return -1;
 80002e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000306:	605a      	str	r2, [r3, #4]
	return 0;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <_isatty>:

int _isatty(int file)
{
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
	return 1;
 800031e:	2301      	movs	r3, #1
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
	return 0;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
	...

08000348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <_sbrk+0x5c>)
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <_sbrk+0x60>)
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <_sbrk+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <_sbrk+0x64>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <_sbrk+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	693a      	ldr	r2, [r7, #16]
 8000374:	429a      	cmp	r2, r3
 8000376:	d207      	bcs.n	8000388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000378:	f000 f906 	bl	8000588 <__errno>
 800037c:	4603      	mov	r3, r0
 800037e:	220c      	movs	r2, #12
 8000380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	e009      	b.n	800039c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <_sbrk+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <_sbrk+0x64>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <_sbrk+0x64>)
 8000398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20030000 	.word	0x20030000
 80003a8:	00000400 	.word	0x00000400
 80003ac:	20000080 	.word	0x20000080
 80003b0:	200000a0 	.word	0x200000a0

080003b4 <__io_putchar>:
uint8_t	__io_putchar(uint8_t byte);



uint8_t	__io_putchar(uint8_t byte)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	uart1_write(byte);
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f88b 	bl	80004dc <uart1_write>
	return byte;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <uart1_rxtx_init>:

void 	uart1_rxtx_init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	 * 	for TX on UART1
	 *
	 * 	Set PA10 mode to alternate function mode
	 * 	for RX on UART1
	 */
	RCC->AHB1ENR	|=	RCC_AHB1ENR_GPIOAEN;
 80003d4:	4b33      	ldr	r3, [pc, #204]	; (80004a4 <uart1_rxtx_init+0xd4>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a32      	ldr	r2, [pc, #200]	; (80004a4 <uart1_rxtx_init+0xd4>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 mode to alternate function mode*/
	GPIOA->MODER	|=	GPIO_MODER_MODE9_1;
 80003e0:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <uart1_rxtx_init+0xd8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a30      	ldr	r2, [pc, #192]	; (80004a8 <uart1_rxtx_init+0xd8>)
 80003e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	&=	~GPIO_MODER_MODE9_0;
 80003ec:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <uart1_rxtx_init+0xd8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2d      	ldr	r2, [pc, #180]	; (80004a8 <uart1_rxtx_init+0xd8>)
 80003f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003f6:	6013      	str	r3, [r2, #0]

	/*Set PA10 mode to alternate function mode*/
	GPIOA->MODER	|=	GPIO_MODER_MODE10_1;
 80003f8:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <uart1_rxtx_init+0xd8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a2a      	ldr	r2, [pc, #168]	; (80004a8 <uart1_rxtx_init+0xd8>)
 80003fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000402:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	&=	~GPIO_MODER_MODE10_0;
 8000404:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800040a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800040e:	6013      	str	r3, [r2, #0]

	/*Set PA9 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH1_0;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a24      	ldr	r2, [pc, #144]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH1_1;
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH1_2;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800042a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042c:	4a1e      	ldr	r2, [pc, #120]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800042e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000432:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	&=	~GPIO_AFRH_AFRH1_3;
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800043a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800043e:	6253      	str	r3, [r2, #36]	; 0x24

	/*Set PA10 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH2_0;
 8000440:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000444:	4a18      	ldr	r2, [pc, #96]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800044a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH2_1;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800044e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000450:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000456:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH2_2;
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045c:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800045e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000462:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	&=	~GPIO_AFRH_AFRH2_3;
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <uart1_rxtx_init+0xd8>)
 8000466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <uart1_rxtx_init+0xd8>)
 800046a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800046e:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock access to uart1*/
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <uart1_rxtx_init+0xd4>)
 8000472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000474:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <uart1_rxtx_init+0xd4>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Configure baudrate*/
	USART1->BRR		=	uart_div(APB1, BAUDRATE);
 800047c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000480:	480a      	ldr	r0, [pc, #40]	; (80004ac <uart1_rxtx_init+0xdc>)
 8000482:	f000 f843 	bl	800050c <uart_div>
 8000486:	4603      	mov	r3, r0
 8000488:	461a      	mov	r2, r3
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <uart1_rxtx_init+0xe0>)
 800048c:	609a      	str	r2, [r3, #8]

	/*Configure the TX*/
	USART1->CR1		=	USART_CR1_TE|USART_CR1_RE;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <uart1_rxtx_init+0xe0>)
 8000490:	220c      	movs	r2, #12
 8000492:	60da      	str	r2, [r3, #12]

	/*Enable USART1*/
	USART1->CR1		|=	USART_CR1_UE;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <uart1_rxtx_init+0xe0>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <uart1_rxtx_init+0xe0>)
 800049a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800049e:	60d3      	str	r3, [r2, #12]
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020000 	.word	0x40020000
 80004ac:	00f42400 	.word	0x00f42400
 80004b0:	40011000 	.word	0x40011000

080004b4 <uart1_read>:

uint8_t	uart1_read(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	while( !(USART1->SR & USART_SR_RXNE) );
 80004b8:	bf00      	nop
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <uart1_read+0x24>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0320 	and.w	r3, r3, #32
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <uart1_read+0x6>
	return USART1->DR;
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <uart1_read+0x24>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	b2db      	uxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40011000 	.word	0x40011000

080004dc <uart1_write>:

void 	uart1_write(uint8_t ch)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while( !(USART1->SR & USART_SR_TXE) );
 80004e6:	bf00      	nop
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <uart1_write+0x2c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f9      	beq.n	80004e8 <uart1_write+0xc>
	/*Write to transmit data register*/
	USART1->DR	=	(ch & 0xFF);
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <uart1_write+0x2c>)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	6053      	str	r3, [r2, #4]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40011000 	.word	0x40011000

0800050c <uart_div>:

static 	uint16_t	uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	return ( (PeriphClk + (BaudRate/2U))/BaudRate );
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	085a      	lsrs	r2, r3, #1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	441a      	add	r2, r3
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	b29b      	uxth	r3, r3
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000538:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000562:	f000 f817 	bl	8000594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f7ff fe41 	bl	80001ec <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000578:	0800100c 	.word	0x0800100c
  ldr r2, =_sbss
 800057c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000580:	2000009c 	.word	0x2000009c

08000584 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC_IRQHandler>
	...

08000588 <__errno>:
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <__errno+0x8>)
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000000 	.word	0x20000000

08000594 <__libc_init_array>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	4d0d      	ldr	r5, [pc, #52]	; (80005cc <__libc_init_array+0x38>)
 8000598:	4c0d      	ldr	r4, [pc, #52]	; (80005d0 <__libc_init_array+0x3c>)
 800059a:	1b64      	subs	r4, r4, r5
 800059c:	10a4      	asrs	r4, r4, #2
 800059e:	2600      	movs	r6, #0
 80005a0:	42a6      	cmp	r6, r4
 80005a2:	d109      	bne.n	80005b8 <__libc_init_array+0x24>
 80005a4:	4d0b      	ldr	r5, [pc, #44]	; (80005d4 <__libc_init_array+0x40>)
 80005a6:	4c0c      	ldr	r4, [pc, #48]	; (80005d8 <__libc_init_array+0x44>)
 80005a8:	f000 fce6 	bl	8000f78 <_init>
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	2600      	movs	r6, #0
 80005b2:	42a6      	cmp	r6, r4
 80005b4:	d105      	bne.n	80005c2 <__libc_init_array+0x2e>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005bc:	4798      	blx	r3
 80005be:	3601      	adds	r6, #1
 80005c0:	e7ee      	b.n	80005a0 <__libc_init_array+0xc>
 80005c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c6:	4798      	blx	r3
 80005c8:	3601      	adds	r6, #1
 80005ca:	e7f2      	b.n	80005b2 <__libc_init_array+0x1e>
 80005cc:	08001004 	.word	0x08001004
 80005d0:	08001004 	.word	0x08001004
 80005d4:	08001004 	.word	0x08001004
 80005d8:	08001008 	.word	0x08001008

080005dc <memset>:
 80005dc:	4402      	add	r2, r0
 80005de:	4603      	mov	r3, r0
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d100      	bne.n	80005e6 <memset+0xa>
 80005e4:	4770      	bx	lr
 80005e6:	f803 1b01 	strb.w	r1, [r3], #1
 80005ea:	e7f9      	b.n	80005e0 <memset+0x4>

080005ec <_puts_r>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	460e      	mov	r6, r1
 80005f0:	4605      	mov	r5, r0
 80005f2:	b118      	cbz	r0, 80005fc <_puts_r+0x10>
 80005f4:	6983      	ldr	r3, [r0, #24]
 80005f6:	b90b      	cbnz	r3, 80005fc <_puts_r+0x10>
 80005f8:	f000 fa48 	bl	8000a8c <__sinit>
 80005fc:	69ab      	ldr	r3, [r5, #24]
 80005fe:	68ac      	ldr	r4, [r5, #8]
 8000600:	b913      	cbnz	r3, 8000608 <_puts_r+0x1c>
 8000602:	4628      	mov	r0, r5
 8000604:	f000 fa42 	bl	8000a8c <__sinit>
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <_puts_r+0xd0>)
 800060a:	429c      	cmp	r4, r3
 800060c:	d120      	bne.n	8000650 <_puts_r+0x64>
 800060e:	686c      	ldr	r4, [r5, #4]
 8000610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000612:	07db      	lsls	r3, r3, #31
 8000614:	d405      	bmi.n	8000622 <_puts_r+0x36>
 8000616:	89a3      	ldrh	r3, [r4, #12]
 8000618:	0598      	lsls	r0, r3, #22
 800061a:	d402      	bmi.n	8000622 <_puts_r+0x36>
 800061c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800061e:	f000 fad3 	bl	8000bc8 <__retarget_lock_acquire_recursive>
 8000622:	89a3      	ldrh	r3, [r4, #12]
 8000624:	0719      	lsls	r1, r3, #28
 8000626:	d51d      	bpl.n	8000664 <_puts_r+0x78>
 8000628:	6923      	ldr	r3, [r4, #16]
 800062a:	b1db      	cbz	r3, 8000664 <_puts_r+0x78>
 800062c:	3e01      	subs	r6, #1
 800062e:	68a3      	ldr	r3, [r4, #8]
 8000630:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000634:	3b01      	subs	r3, #1
 8000636:	60a3      	str	r3, [r4, #8]
 8000638:	bb39      	cbnz	r1, 800068a <_puts_r+0x9e>
 800063a:	2b00      	cmp	r3, #0
 800063c:	da38      	bge.n	80006b0 <_puts_r+0xc4>
 800063e:	4622      	mov	r2, r4
 8000640:	210a      	movs	r1, #10
 8000642:	4628      	mov	r0, r5
 8000644:	f000 f848 	bl	80006d8 <__swbuf_r>
 8000648:	3001      	adds	r0, #1
 800064a:	d011      	beq.n	8000670 <_puts_r+0x84>
 800064c:	250a      	movs	r5, #10
 800064e:	e011      	b.n	8000674 <_puts_r+0x88>
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <_puts_r+0xd4>)
 8000652:	429c      	cmp	r4, r3
 8000654:	d101      	bne.n	800065a <_puts_r+0x6e>
 8000656:	68ac      	ldr	r4, [r5, #8]
 8000658:	e7da      	b.n	8000610 <_puts_r+0x24>
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <_puts_r+0xd8>)
 800065c:	429c      	cmp	r4, r3
 800065e:	bf08      	it	eq
 8000660:	68ec      	ldreq	r4, [r5, #12]
 8000662:	e7d5      	b.n	8000610 <_puts_r+0x24>
 8000664:	4621      	mov	r1, r4
 8000666:	4628      	mov	r0, r5
 8000668:	f000 f888 	bl	800077c <__swsetup_r>
 800066c:	2800      	cmp	r0, #0
 800066e:	d0dd      	beq.n	800062c <_puts_r+0x40>
 8000670:	f04f 35ff 	mov.w	r5, #4294967295
 8000674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000676:	07da      	lsls	r2, r3, #31
 8000678:	d405      	bmi.n	8000686 <_puts_r+0x9a>
 800067a:	89a3      	ldrh	r3, [r4, #12]
 800067c:	059b      	lsls	r3, r3, #22
 800067e:	d402      	bmi.n	8000686 <_puts_r+0x9a>
 8000680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000682:	f000 faa2 	bl	8000bca <__retarget_lock_release_recursive>
 8000686:	4628      	mov	r0, r5
 8000688:	bd70      	pop	{r4, r5, r6, pc}
 800068a:	2b00      	cmp	r3, #0
 800068c:	da04      	bge.n	8000698 <_puts_r+0xac>
 800068e:	69a2      	ldr	r2, [r4, #24]
 8000690:	429a      	cmp	r2, r3
 8000692:	dc06      	bgt.n	80006a2 <_puts_r+0xb6>
 8000694:	290a      	cmp	r1, #10
 8000696:	d004      	beq.n	80006a2 <_puts_r+0xb6>
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	6022      	str	r2, [r4, #0]
 800069e:	7019      	strb	r1, [r3, #0]
 80006a0:	e7c5      	b.n	800062e <_puts_r+0x42>
 80006a2:	4622      	mov	r2, r4
 80006a4:	4628      	mov	r0, r5
 80006a6:	f000 f817 	bl	80006d8 <__swbuf_r>
 80006aa:	3001      	adds	r0, #1
 80006ac:	d1bf      	bne.n	800062e <_puts_r+0x42>
 80006ae:	e7df      	b.n	8000670 <_puts_r+0x84>
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	250a      	movs	r5, #10
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	6022      	str	r2, [r4, #0]
 80006b8:	701d      	strb	r5, [r3, #0]
 80006ba:	e7db      	b.n	8000674 <_puts_r+0x88>
 80006bc:	08000fc4 	.word	0x08000fc4
 80006c0:	08000fe4 	.word	0x08000fe4
 80006c4:	08000fa4 	.word	0x08000fa4

080006c8 <puts>:
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <puts+0xc>)
 80006ca:	4601      	mov	r1, r0
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	f7ff bf8d 	b.w	80005ec <_puts_r>
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000

080006d8 <__swbuf_r>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	460e      	mov	r6, r1
 80006dc:	4614      	mov	r4, r2
 80006de:	4605      	mov	r5, r0
 80006e0:	b118      	cbz	r0, 80006ea <__swbuf_r+0x12>
 80006e2:	6983      	ldr	r3, [r0, #24]
 80006e4:	b90b      	cbnz	r3, 80006ea <__swbuf_r+0x12>
 80006e6:	f000 f9d1 	bl	8000a8c <__sinit>
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <__swbuf_r+0x98>)
 80006ec:	429c      	cmp	r4, r3
 80006ee:	d12b      	bne.n	8000748 <__swbuf_r+0x70>
 80006f0:	686c      	ldr	r4, [r5, #4]
 80006f2:	69a3      	ldr	r3, [r4, #24]
 80006f4:	60a3      	str	r3, [r4, #8]
 80006f6:	89a3      	ldrh	r3, [r4, #12]
 80006f8:	071a      	lsls	r2, r3, #28
 80006fa:	d52f      	bpl.n	800075c <__swbuf_r+0x84>
 80006fc:	6923      	ldr	r3, [r4, #16]
 80006fe:	b36b      	cbz	r3, 800075c <__swbuf_r+0x84>
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	6820      	ldr	r0, [r4, #0]
 8000704:	1ac0      	subs	r0, r0, r3
 8000706:	6963      	ldr	r3, [r4, #20]
 8000708:	b2f6      	uxtb	r6, r6
 800070a:	4283      	cmp	r3, r0
 800070c:	4637      	mov	r7, r6
 800070e:	dc04      	bgt.n	800071a <__swbuf_r+0x42>
 8000710:	4621      	mov	r1, r4
 8000712:	4628      	mov	r0, r5
 8000714:	f000 f926 	bl	8000964 <_fflush_r>
 8000718:	bb30      	cbnz	r0, 8000768 <__swbuf_r+0x90>
 800071a:	68a3      	ldr	r3, [r4, #8]
 800071c:	3b01      	subs	r3, #1
 800071e:	60a3      	str	r3, [r4, #8]
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	6022      	str	r2, [r4, #0]
 8000726:	701e      	strb	r6, [r3, #0]
 8000728:	6963      	ldr	r3, [r4, #20]
 800072a:	3001      	adds	r0, #1
 800072c:	4283      	cmp	r3, r0
 800072e:	d004      	beq.n	800073a <__swbuf_r+0x62>
 8000730:	89a3      	ldrh	r3, [r4, #12]
 8000732:	07db      	lsls	r3, r3, #31
 8000734:	d506      	bpl.n	8000744 <__swbuf_r+0x6c>
 8000736:	2e0a      	cmp	r6, #10
 8000738:	d104      	bne.n	8000744 <__swbuf_r+0x6c>
 800073a:	4621      	mov	r1, r4
 800073c:	4628      	mov	r0, r5
 800073e:	f000 f911 	bl	8000964 <_fflush_r>
 8000742:	b988      	cbnz	r0, 8000768 <__swbuf_r+0x90>
 8000744:	4638      	mov	r0, r7
 8000746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <__swbuf_r+0x9c>)
 800074a:	429c      	cmp	r4, r3
 800074c:	d101      	bne.n	8000752 <__swbuf_r+0x7a>
 800074e:	68ac      	ldr	r4, [r5, #8]
 8000750:	e7cf      	b.n	80006f2 <__swbuf_r+0x1a>
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <__swbuf_r+0xa0>)
 8000754:	429c      	cmp	r4, r3
 8000756:	bf08      	it	eq
 8000758:	68ec      	ldreq	r4, [r5, #12]
 800075a:	e7ca      	b.n	80006f2 <__swbuf_r+0x1a>
 800075c:	4621      	mov	r1, r4
 800075e:	4628      	mov	r0, r5
 8000760:	f000 f80c 	bl	800077c <__swsetup_r>
 8000764:	2800      	cmp	r0, #0
 8000766:	d0cb      	beq.n	8000700 <__swbuf_r+0x28>
 8000768:	f04f 37ff 	mov.w	r7, #4294967295
 800076c:	e7ea      	b.n	8000744 <__swbuf_r+0x6c>
 800076e:	bf00      	nop
 8000770:	08000fc4 	.word	0x08000fc4
 8000774:	08000fe4 	.word	0x08000fe4
 8000778:	08000fa4 	.word	0x08000fa4

0800077c <__swsetup_r>:
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <__swsetup_r+0xcc>)
 800077e:	b570      	push	{r4, r5, r6, lr}
 8000780:	681d      	ldr	r5, [r3, #0]
 8000782:	4606      	mov	r6, r0
 8000784:	460c      	mov	r4, r1
 8000786:	b125      	cbz	r5, 8000792 <__swsetup_r+0x16>
 8000788:	69ab      	ldr	r3, [r5, #24]
 800078a:	b913      	cbnz	r3, 8000792 <__swsetup_r+0x16>
 800078c:	4628      	mov	r0, r5
 800078e:	f000 f97d 	bl	8000a8c <__sinit>
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <__swsetup_r+0xd0>)
 8000794:	429c      	cmp	r4, r3
 8000796:	d10f      	bne.n	80007b8 <__swsetup_r+0x3c>
 8000798:	686c      	ldr	r4, [r5, #4]
 800079a:	89a3      	ldrh	r3, [r4, #12]
 800079c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007a0:	0719      	lsls	r1, r3, #28
 80007a2:	d42c      	bmi.n	80007fe <__swsetup_r+0x82>
 80007a4:	06dd      	lsls	r5, r3, #27
 80007a6:	d411      	bmi.n	80007cc <__swsetup_r+0x50>
 80007a8:	2309      	movs	r3, #9
 80007aa:	6033      	str	r3, [r6, #0]
 80007ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80007b0:	81a3      	strh	r3, [r4, #12]
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	e03e      	b.n	8000836 <__swsetup_r+0xba>
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <__swsetup_r+0xd4>)
 80007ba:	429c      	cmp	r4, r3
 80007bc:	d101      	bne.n	80007c2 <__swsetup_r+0x46>
 80007be:	68ac      	ldr	r4, [r5, #8]
 80007c0:	e7eb      	b.n	800079a <__swsetup_r+0x1e>
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <__swsetup_r+0xd8>)
 80007c4:	429c      	cmp	r4, r3
 80007c6:	bf08      	it	eq
 80007c8:	68ec      	ldreq	r4, [r5, #12]
 80007ca:	e7e6      	b.n	800079a <__swsetup_r+0x1e>
 80007cc:	0758      	lsls	r0, r3, #29
 80007ce:	d512      	bpl.n	80007f6 <__swsetup_r+0x7a>
 80007d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007d2:	b141      	cbz	r1, 80007e6 <__swsetup_r+0x6a>
 80007d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007d8:	4299      	cmp	r1, r3
 80007da:	d002      	beq.n	80007e2 <__swsetup_r+0x66>
 80007dc:	4630      	mov	r0, r6
 80007de:	f000 fa59 	bl	8000c94 <_free_r>
 80007e2:	2300      	movs	r3, #0
 80007e4:	6363      	str	r3, [r4, #52]	; 0x34
 80007e6:	89a3      	ldrh	r3, [r4, #12]
 80007e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80007ec:	81a3      	strh	r3, [r4, #12]
 80007ee:	2300      	movs	r3, #0
 80007f0:	6063      	str	r3, [r4, #4]
 80007f2:	6923      	ldr	r3, [r4, #16]
 80007f4:	6023      	str	r3, [r4, #0]
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	81a3      	strh	r3, [r4, #12]
 80007fe:	6923      	ldr	r3, [r4, #16]
 8000800:	b94b      	cbnz	r3, 8000816 <__swsetup_r+0x9a>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800080c:	d003      	beq.n	8000816 <__swsetup_r+0x9a>
 800080e:	4621      	mov	r1, r4
 8000810:	4630      	mov	r0, r6
 8000812:	f000 f9ff 	bl	8000c14 <__smakebuf_r>
 8000816:	89a0      	ldrh	r0, [r4, #12]
 8000818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800081c:	f010 0301 	ands.w	r3, r0, #1
 8000820:	d00a      	beq.n	8000838 <__swsetup_r+0xbc>
 8000822:	2300      	movs	r3, #0
 8000824:	60a3      	str	r3, [r4, #8]
 8000826:	6963      	ldr	r3, [r4, #20]
 8000828:	425b      	negs	r3, r3
 800082a:	61a3      	str	r3, [r4, #24]
 800082c:	6923      	ldr	r3, [r4, #16]
 800082e:	b943      	cbnz	r3, 8000842 <__swsetup_r+0xc6>
 8000830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000834:	d1ba      	bne.n	80007ac <__swsetup_r+0x30>
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	0781      	lsls	r1, r0, #30
 800083a:	bf58      	it	pl
 800083c:	6963      	ldrpl	r3, [r4, #20]
 800083e:	60a3      	str	r3, [r4, #8]
 8000840:	e7f4      	b.n	800082c <__swsetup_r+0xb0>
 8000842:	2000      	movs	r0, #0
 8000844:	e7f7      	b.n	8000836 <__swsetup_r+0xba>
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08000fc4 	.word	0x08000fc4
 8000850:	08000fe4 	.word	0x08000fe4
 8000854:	08000fa4 	.word	0x08000fa4

08000858 <__sflush_r>:
 8000858:	898a      	ldrh	r2, [r1, #12]
 800085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800085e:	4605      	mov	r5, r0
 8000860:	0710      	lsls	r0, r2, #28
 8000862:	460c      	mov	r4, r1
 8000864:	d458      	bmi.n	8000918 <__sflush_r+0xc0>
 8000866:	684b      	ldr	r3, [r1, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dc05      	bgt.n	8000878 <__sflush_r+0x20>
 800086c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800086e:	2b00      	cmp	r3, #0
 8000870:	dc02      	bgt.n	8000878 <__sflush_r+0x20>
 8000872:	2000      	movs	r0, #0
 8000874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800087a:	2e00      	cmp	r6, #0
 800087c:	d0f9      	beq.n	8000872 <__sflush_r+0x1a>
 800087e:	2300      	movs	r3, #0
 8000880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000884:	682f      	ldr	r7, [r5, #0]
 8000886:	602b      	str	r3, [r5, #0]
 8000888:	d032      	beq.n	80008f0 <__sflush_r+0x98>
 800088a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800088c:	89a3      	ldrh	r3, [r4, #12]
 800088e:	075a      	lsls	r2, r3, #29
 8000890:	d505      	bpl.n	800089e <__sflush_r+0x46>
 8000892:	6863      	ldr	r3, [r4, #4]
 8000894:	1ac0      	subs	r0, r0, r3
 8000896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000898:	b10b      	cbz	r3, 800089e <__sflush_r+0x46>
 800089a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800089c:	1ac0      	subs	r0, r0, r3
 800089e:	2300      	movs	r3, #0
 80008a0:	4602      	mov	r2, r0
 80008a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008a4:	6a21      	ldr	r1, [r4, #32]
 80008a6:	4628      	mov	r0, r5
 80008a8:	47b0      	blx	r6
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	d106      	bne.n	80008be <__sflush_r+0x66>
 80008b0:	6829      	ldr	r1, [r5, #0]
 80008b2:	291d      	cmp	r1, #29
 80008b4:	d82c      	bhi.n	8000910 <__sflush_r+0xb8>
 80008b6:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <__sflush_r+0x108>)
 80008b8:	40ca      	lsrs	r2, r1
 80008ba:	07d6      	lsls	r6, r2, #31
 80008bc:	d528      	bpl.n	8000910 <__sflush_r+0xb8>
 80008be:	2200      	movs	r2, #0
 80008c0:	6062      	str	r2, [r4, #4]
 80008c2:	04d9      	lsls	r1, r3, #19
 80008c4:	6922      	ldr	r2, [r4, #16]
 80008c6:	6022      	str	r2, [r4, #0]
 80008c8:	d504      	bpl.n	80008d4 <__sflush_r+0x7c>
 80008ca:	1c42      	adds	r2, r0, #1
 80008cc:	d101      	bne.n	80008d2 <__sflush_r+0x7a>
 80008ce:	682b      	ldr	r3, [r5, #0]
 80008d0:	b903      	cbnz	r3, 80008d4 <__sflush_r+0x7c>
 80008d2:	6560      	str	r0, [r4, #84]	; 0x54
 80008d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008d6:	602f      	str	r7, [r5, #0]
 80008d8:	2900      	cmp	r1, #0
 80008da:	d0ca      	beq.n	8000872 <__sflush_r+0x1a>
 80008dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008e0:	4299      	cmp	r1, r3
 80008e2:	d002      	beq.n	80008ea <__sflush_r+0x92>
 80008e4:	4628      	mov	r0, r5
 80008e6:	f000 f9d5 	bl	8000c94 <_free_r>
 80008ea:	2000      	movs	r0, #0
 80008ec:	6360      	str	r0, [r4, #52]	; 0x34
 80008ee:	e7c1      	b.n	8000874 <__sflush_r+0x1c>
 80008f0:	6a21      	ldr	r1, [r4, #32]
 80008f2:	2301      	movs	r3, #1
 80008f4:	4628      	mov	r0, r5
 80008f6:	47b0      	blx	r6
 80008f8:	1c41      	adds	r1, r0, #1
 80008fa:	d1c7      	bne.n	800088c <__sflush_r+0x34>
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0c4      	beq.n	800088c <__sflush_r+0x34>
 8000902:	2b1d      	cmp	r3, #29
 8000904:	d001      	beq.n	800090a <__sflush_r+0xb2>
 8000906:	2b16      	cmp	r3, #22
 8000908:	d101      	bne.n	800090e <__sflush_r+0xb6>
 800090a:	602f      	str	r7, [r5, #0]
 800090c:	e7b1      	b.n	8000872 <__sflush_r+0x1a>
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	81a3      	strh	r3, [r4, #12]
 8000916:	e7ad      	b.n	8000874 <__sflush_r+0x1c>
 8000918:	690f      	ldr	r7, [r1, #16]
 800091a:	2f00      	cmp	r7, #0
 800091c:	d0a9      	beq.n	8000872 <__sflush_r+0x1a>
 800091e:	0793      	lsls	r3, r2, #30
 8000920:	680e      	ldr	r6, [r1, #0]
 8000922:	bf08      	it	eq
 8000924:	694b      	ldreq	r3, [r1, #20]
 8000926:	600f      	str	r7, [r1, #0]
 8000928:	bf18      	it	ne
 800092a:	2300      	movne	r3, #0
 800092c:	eba6 0807 	sub.w	r8, r6, r7
 8000930:	608b      	str	r3, [r1, #8]
 8000932:	f1b8 0f00 	cmp.w	r8, #0
 8000936:	dd9c      	ble.n	8000872 <__sflush_r+0x1a>
 8000938:	6a21      	ldr	r1, [r4, #32]
 800093a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800093c:	4643      	mov	r3, r8
 800093e:	463a      	mov	r2, r7
 8000940:	4628      	mov	r0, r5
 8000942:	47b0      	blx	r6
 8000944:	2800      	cmp	r0, #0
 8000946:	dc06      	bgt.n	8000956 <__sflush_r+0xfe>
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094e:	81a3      	strh	r3, [r4, #12]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	e78e      	b.n	8000874 <__sflush_r+0x1c>
 8000956:	4407      	add	r7, r0
 8000958:	eba8 0800 	sub.w	r8, r8, r0
 800095c:	e7e9      	b.n	8000932 <__sflush_r+0xda>
 800095e:	bf00      	nop
 8000960:	20400001 	.word	0x20400001

08000964 <_fflush_r>:
 8000964:	b538      	push	{r3, r4, r5, lr}
 8000966:	690b      	ldr	r3, [r1, #16]
 8000968:	4605      	mov	r5, r0
 800096a:	460c      	mov	r4, r1
 800096c:	b913      	cbnz	r3, 8000974 <_fflush_r+0x10>
 800096e:	2500      	movs	r5, #0
 8000970:	4628      	mov	r0, r5
 8000972:	bd38      	pop	{r3, r4, r5, pc}
 8000974:	b118      	cbz	r0, 800097e <_fflush_r+0x1a>
 8000976:	6983      	ldr	r3, [r0, #24]
 8000978:	b90b      	cbnz	r3, 800097e <_fflush_r+0x1a>
 800097a:	f000 f887 	bl	8000a8c <__sinit>
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <_fflush_r+0x6c>)
 8000980:	429c      	cmp	r4, r3
 8000982:	d11b      	bne.n	80009bc <_fflush_r+0x58>
 8000984:	686c      	ldr	r4, [r5, #4]
 8000986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0ef      	beq.n	800096e <_fflush_r+0xa>
 800098e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000990:	07d0      	lsls	r0, r2, #31
 8000992:	d404      	bmi.n	800099e <_fflush_r+0x3a>
 8000994:	0599      	lsls	r1, r3, #22
 8000996:	d402      	bmi.n	800099e <_fflush_r+0x3a>
 8000998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800099a:	f000 f915 	bl	8000bc8 <__retarget_lock_acquire_recursive>
 800099e:	4628      	mov	r0, r5
 80009a0:	4621      	mov	r1, r4
 80009a2:	f7ff ff59 	bl	8000858 <__sflush_r>
 80009a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009a8:	07da      	lsls	r2, r3, #31
 80009aa:	4605      	mov	r5, r0
 80009ac:	d4e0      	bmi.n	8000970 <_fflush_r+0xc>
 80009ae:	89a3      	ldrh	r3, [r4, #12]
 80009b0:	059b      	lsls	r3, r3, #22
 80009b2:	d4dd      	bmi.n	8000970 <_fflush_r+0xc>
 80009b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009b6:	f000 f908 	bl	8000bca <__retarget_lock_release_recursive>
 80009ba:	e7d9      	b.n	8000970 <_fflush_r+0xc>
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <_fflush_r+0x70>)
 80009be:	429c      	cmp	r4, r3
 80009c0:	d101      	bne.n	80009c6 <_fflush_r+0x62>
 80009c2:	68ac      	ldr	r4, [r5, #8]
 80009c4:	e7df      	b.n	8000986 <_fflush_r+0x22>
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <_fflush_r+0x74>)
 80009c8:	429c      	cmp	r4, r3
 80009ca:	bf08      	it	eq
 80009cc:	68ec      	ldreq	r4, [r5, #12]
 80009ce:	e7da      	b.n	8000986 <_fflush_r+0x22>
 80009d0:	08000fc4 	.word	0x08000fc4
 80009d4:	08000fe4 	.word	0x08000fe4
 80009d8:	08000fa4 	.word	0x08000fa4

080009dc <std>:
 80009dc:	2300      	movs	r3, #0
 80009de:	b510      	push	{r4, lr}
 80009e0:	4604      	mov	r4, r0
 80009e2:	e9c0 3300 	strd	r3, r3, [r0]
 80009e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009ea:	6083      	str	r3, [r0, #8]
 80009ec:	8181      	strh	r1, [r0, #12]
 80009ee:	6643      	str	r3, [r0, #100]	; 0x64
 80009f0:	81c2      	strh	r2, [r0, #14]
 80009f2:	6183      	str	r3, [r0, #24]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2208      	movs	r2, #8
 80009f8:	305c      	adds	r0, #92	; 0x5c
 80009fa:	f7ff fdef 	bl	80005dc <memset>
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <std+0x38>)
 8000a00:	6263      	str	r3, [r4, #36]	; 0x24
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <std+0x3c>)
 8000a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <std+0x40>)
 8000a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <std+0x44>)
 8000a0c:	6224      	str	r4, [r4, #32]
 8000a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop
 8000a14:	08000e09 	.word	0x08000e09
 8000a18:	08000e2b 	.word	0x08000e2b
 8000a1c:	08000e63 	.word	0x08000e63
 8000a20:	08000e87 	.word	0x08000e87

08000a24 <_cleanup_r>:
 8000a24:	4901      	ldr	r1, [pc, #4]	; (8000a2c <_cleanup_r+0x8>)
 8000a26:	f000 b8af 	b.w	8000b88 <_fwalk_reent>
 8000a2a:	bf00      	nop
 8000a2c:	08000965 	.word	0x08000965

08000a30 <__sfmoreglue>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	1e4a      	subs	r2, r1, #1
 8000a34:	2568      	movs	r5, #104	; 0x68
 8000a36:	4355      	muls	r5, r2
 8000a38:	460e      	mov	r6, r1
 8000a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a3e:	f000 f979 	bl	8000d34 <_malloc_r>
 8000a42:	4604      	mov	r4, r0
 8000a44:	b140      	cbz	r0, 8000a58 <__sfmoreglue+0x28>
 8000a46:	2100      	movs	r1, #0
 8000a48:	e9c0 1600 	strd	r1, r6, [r0]
 8000a4c:	300c      	adds	r0, #12
 8000a4e:	60a0      	str	r0, [r4, #8]
 8000a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a54:	f7ff fdc2 	bl	80005dc <memset>
 8000a58:	4620      	mov	r0, r4
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}

08000a5c <__sfp_lock_acquire>:
 8000a5c:	4801      	ldr	r0, [pc, #4]	; (8000a64 <__sfp_lock_acquire+0x8>)
 8000a5e:	f000 b8b3 	b.w	8000bc8 <__retarget_lock_acquire_recursive>
 8000a62:	bf00      	nop
 8000a64:	20000095 	.word	0x20000095

08000a68 <__sfp_lock_release>:
 8000a68:	4801      	ldr	r0, [pc, #4]	; (8000a70 <__sfp_lock_release+0x8>)
 8000a6a:	f000 b8ae 	b.w	8000bca <__retarget_lock_release_recursive>
 8000a6e:	bf00      	nop
 8000a70:	20000095 	.word	0x20000095

08000a74 <__sinit_lock_acquire>:
 8000a74:	4801      	ldr	r0, [pc, #4]	; (8000a7c <__sinit_lock_acquire+0x8>)
 8000a76:	f000 b8a7 	b.w	8000bc8 <__retarget_lock_acquire_recursive>
 8000a7a:	bf00      	nop
 8000a7c:	20000090 	.word	0x20000090

08000a80 <__sinit_lock_release>:
 8000a80:	4801      	ldr	r0, [pc, #4]	; (8000a88 <__sinit_lock_release+0x8>)
 8000a82:	f000 b8a2 	b.w	8000bca <__retarget_lock_release_recursive>
 8000a86:	bf00      	nop
 8000a88:	20000090 	.word	0x20000090

08000a8c <__sinit>:
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4604      	mov	r4, r0
 8000a90:	f7ff fff0 	bl	8000a74 <__sinit_lock_acquire>
 8000a94:	69a3      	ldr	r3, [r4, #24]
 8000a96:	b11b      	cbz	r3, 8000aa0 <__sinit+0x14>
 8000a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a9c:	f7ff bff0 	b.w	8000a80 <__sinit_lock_release>
 8000aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <__sinit+0x68>)
 8000aa8:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <__sinit+0x6c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	bf04      	itt	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	61a3      	streq	r3, [r4, #24]
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f000 f820 	bl	8000afc <__sfp>
 8000abc:	6060      	str	r0, [r4, #4]
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f000 f81c 	bl	8000afc <__sfp>
 8000ac4:	60a0      	str	r0, [r4, #8]
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f000 f818 	bl	8000afc <__sfp>
 8000acc:	2200      	movs	r2, #0
 8000ace:	60e0      	str	r0, [r4, #12]
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	6860      	ldr	r0, [r4, #4]
 8000ad4:	f7ff ff82 	bl	80009dc <std>
 8000ad8:	68a0      	ldr	r0, [r4, #8]
 8000ada:	2201      	movs	r2, #1
 8000adc:	2109      	movs	r1, #9
 8000ade:	f7ff ff7d 	bl	80009dc <std>
 8000ae2:	68e0      	ldr	r0, [r4, #12]
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	2112      	movs	r1, #18
 8000ae8:	f7ff ff78 	bl	80009dc <std>
 8000aec:	2301      	movs	r3, #1
 8000aee:	61a3      	str	r3, [r4, #24]
 8000af0:	e7d2      	b.n	8000a98 <__sinit+0xc>
 8000af2:	bf00      	nop
 8000af4:	08000fa0 	.word	0x08000fa0
 8000af8:	08000a25 	.word	0x08000a25

08000afc <__sfp>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	4607      	mov	r7, r0
 8000b00:	f7ff ffac 	bl	8000a5c <__sfp_lock_acquire>
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <__sfp+0x84>)
 8000b06:	681e      	ldr	r6, [r3, #0]
 8000b08:	69b3      	ldr	r3, [r6, #24]
 8000b0a:	b913      	cbnz	r3, 8000b12 <__sfp+0x16>
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	f7ff ffbd 	bl	8000a8c <__sinit>
 8000b12:	3648      	adds	r6, #72	; 0x48
 8000b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	d503      	bpl.n	8000b24 <__sfp+0x28>
 8000b1c:	6833      	ldr	r3, [r6, #0]
 8000b1e:	b30b      	cbz	r3, 8000b64 <__sfp+0x68>
 8000b20:	6836      	ldr	r6, [r6, #0]
 8000b22:	e7f7      	b.n	8000b14 <__sfp+0x18>
 8000b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b28:	b9d5      	cbnz	r5, 8000b60 <__sfp+0x64>
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <__sfp+0x88>)
 8000b2c:	60e3      	str	r3, [r4, #12]
 8000b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b32:	6665      	str	r5, [r4, #100]	; 0x64
 8000b34:	f000 f847 	bl	8000bc6 <__retarget_lock_init_recursive>
 8000b38:	f7ff ff96 	bl	8000a68 <__sfp_lock_release>
 8000b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b44:	6025      	str	r5, [r4, #0]
 8000b46:	61a5      	str	r5, [r4, #24]
 8000b48:	2208      	movs	r2, #8
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b50:	f7ff fd44 	bl	80005dc <memset>
 8000b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b60:	3468      	adds	r4, #104	; 0x68
 8000b62:	e7d9      	b.n	8000b18 <__sfp+0x1c>
 8000b64:	2104      	movs	r1, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	f7ff ff62 	bl	8000a30 <__sfmoreglue>
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	6030      	str	r0, [r6, #0]
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1d5      	bne.n	8000b20 <__sfp+0x24>
 8000b74:	f7ff ff78 	bl	8000a68 <__sfp_lock_release>
 8000b78:	230c      	movs	r3, #12
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	e7ee      	b.n	8000b5c <__sfp+0x60>
 8000b7e:	bf00      	nop
 8000b80:	08000fa0 	.word	0x08000fa0
 8000b84:	ffff0001 	.word	0xffff0001

08000b88 <_fwalk_reent>:
 8000b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	4606      	mov	r6, r0
 8000b8e:	4688      	mov	r8, r1
 8000b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b94:	2700      	movs	r7, #0
 8000b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8000b9e:	d505      	bpl.n	8000bac <_fwalk_reent+0x24>
 8000ba0:	6824      	ldr	r4, [r4, #0]
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d1f7      	bne.n	8000b96 <_fwalk_reent+0xe>
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bac:	89ab      	ldrh	r3, [r5, #12]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d907      	bls.n	8000bc2 <_fwalk_reent+0x3a>
 8000bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	d003      	beq.n	8000bc2 <_fwalk_reent+0x3a>
 8000bba:	4629      	mov	r1, r5
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	47c0      	blx	r8
 8000bc0:	4307      	orrs	r7, r0
 8000bc2:	3568      	adds	r5, #104	; 0x68
 8000bc4:	e7e9      	b.n	8000b9a <_fwalk_reent+0x12>

08000bc6 <__retarget_lock_init_recursive>:
 8000bc6:	4770      	bx	lr

08000bc8 <__retarget_lock_acquire_recursive>:
 8000bc8:	4770      	bx	lr

08000bca <__retarget_lock_release_recursive>:
 8000bca:	4770      	bx	lr

08000bcc <__swhatbuf_r>:
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	460e      	mov	r6, r1
 8000bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	b096      	sub	sp, #88	; 0x58
 8000bd8:	4614      	mov	r4, r2
 8000bda:	461d      	mov	r5, r3
 8000bdc:	da07      	bge.n	8000bee <__swhatbuf_r+0x22>
 8000bde:	2300      	movs	r3, #0
 8000be0:	602b      	str	r3, [r5, #0]
 8000be2:	89b3      	ldrh	r3, [r6, #12]
 8000be4:	061a      	lsls	r2, r3, #24
 8000be6:	d410      	bmi.n	8000c0a <__swhatbuf_r+0x3e>
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bec:	e00e      	b.n	8000c0c <__swhatbuf_r+0x40>
 8000bee:	466a      	mov	r2, sp
 8000bf0:	f000 f970 	bl	8000ed4 <_fstat_r>
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	dbf2      	blt.n	8000bde <__swhatbuf_r+0x12>
 8000bf8:	9a01      	ldr	r2, [sp, #4]
 8000bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c02:	425a      	negs	r2, r3
 8000c04:	415a      	adcs	r2, r3
 8000c06:	602a      	str	r2, [r5, #0]
 8000c08:	e7ee      	b.n	8000be8 <__swhatbuf_r+0x1c>
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	6023      	str	r3, [r4, #0]
 8000c10:	b016      	add	sp, #88	; 0x58
 8000c12:	bd70      	pop	{r4, r5, r6, pc}

08000c14 <__smakebuf_r>:
 8000c14:	898b      	ldrh	r3, [r1, #12]
 8000c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c18:	079d      	lsls	r5, r3, #30
 8000c1a:	4606      	mov	r6, r0
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	d507      	bpl.n	8000c30 <__smakebuf_r+0x1c>
 8000c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	6123      	str	r3, [r4, #16]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	6163      	str	r3, [r4, #20]
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
 8000c30:	ab01      	add	r3, sp, #4
 8000c32:	466a      	mov	r2, sp
 8000c34:	f7ff ffca 	bl	8000bcc <__swhatbuf_r>
 8000c38:	9900      	ldr	r1, [sp, #0]
 8000c3a:	4605      	mov	r5, r0
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f000 f879 	bl	8000d34 <_malloc_r>
 8000c42:	b948      	cbnz	r0, 8000c58 <__smakebuf_r+0x44>
 8000c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c48:	059a      	lsls	r2, r3, #22
 8000c4a:	d4ef      	bmi.n	8000c2c <__smakebuf_r+0x18>
 8000c4c:	f023 0303 	bic.w	r3, r3, #3
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	81a3      	strh	r3, [r4, #12]
 8000c56:	e7e3      	b.n	8000c20 <__smakebuf_r+0xc>
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <__smakebuf_r+0x7c>)
 8000c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	6020      	str	r0, [r4, #0]
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	81a3      	strh	r3, [r4, #12]
 8000c66:	9b00      	ldr	r3, [sp, #0]
 8000c68:	6163      	str	r3, [r4, #20]
 8000c6a:	9b01      	ldr	r3, [sp, #4]
 8000c6c:	6120      	str	r0, [r4, #16]
 8000c6e:	b15b      	cbz	r3, 8000c88 <__smakebuf_r+0x74>
 8000c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c74:	4630      	mov	r0, r6
 8000c76:	f000 f93f 	bl	8000ef8 <_isatty_r>
 8000c7a:	b128      	cbz	r0, 8000c88 <__smakebuf_r+0x74>
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	f023 0303 	bic.w	r3, r3, #3
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	81a3      	strh	r3, [r4, #12]
 8000c88:	89a0      	ldrh	r0, [r4, #12]
 8000c8a:	4305      	orrs	r5, r0
 8000c8c:	81a5      	strh	r5, [r4, #12]
 8000c8e:	e7cd      	b.n	8000c2c <__smakebuf_r+0x18>
 8000c90:	08000a25 	.word	0x08000a25

08000c94 <_free_r>:
 8000c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d048      	beq.n	8000d2c <_free_r+0x98>
 8000c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c9e:	9001      	str	r0, [sp, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8000ca6:	bfb8      	it	lt
 8000ca8:	18e4      	addlt	r4, r4, r3
 8000caa:	f000 f947 	bl	8000f3c <__malloc_lock>
 8000cae:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <_free_r+0x9c>)
 8000cb0:	9801      	ldr	r0, [sp, #4]
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	4615      	mov	r5, r2
 8000cb6:	b933      	cbnz	r3, 8000cc6 <_free_r+0x32>
 8000cb8:	6063      	str	r3, [r4, #4]
 8000cba:	6014      	str	r4, [r2, #0]
 8000cbc:	b003      	add	sp, #12
 8000cbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000cc2:	f000 b941 	b.w	8000f48 <__malloc_unlock>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d90b      	bls.n	8000ce2 <_free_r+0x4e>
 8000cca:	6821      	ldr	r1, [r4, #0]
 8000ccc:	1862      	adds	r2, r4, r1
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	bf04      	itt	eq
 8000cd2:	681a      	ldreq	r2, [r3, #0]
 8000cd4:	685b      	ldreq	r3, [r3, #4]
 8000cd6:	6063      	str	r3, [r4, #4]
 8000cd8:	bf04      	itt	eq
 8000cda:	1852      	addeq	r2, r2, r1
 8000cdc:	6022      	streq	r2, [r4, #0]
 8000cde:	602c      	str	r4, [r5, #0]
 8000ce0:	e7ec      	b.n	8000cbc <_free_r+0x28>
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	b10b      	cbz	r3, 8000cec <_free_r+0x58>
 8000ce8:	42a3      	cmp	r3, r4
 8000cea:	d9fa      	bls.n	8000ce2 <_free_r+0x4e>
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	1855      	adds	r5, r2, r1
 8000cf0:	42a5      	cmp	r5, r4
 8000cf2:	d10b      	bne.n	8000d0c <_free_r+0x78>
 8000cf4:	6824      	ldr	r4, [r4, #0]
 8000cf6:	4421      	add	r1, r4
 8000cf8:	1854      	adds	r4, r2, r1
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	6011      	str	r1, [r2, #0]
 8000cfe:	d1dd      	bne.n	8000cbc <_free_r+0x28>
 8000d00:	681c      	ldr	r4, [r3, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	6053      	str	r3, [r2, #4]
 8000d06:	4421      	add	r1, r4
 8000d08:	6011      	str	r1, [r2, #0]
 8000d0a:	e7d7      	b.n	8000cbc <_free_r+0x28>
 8000d0c:	d902      	bls.n	8000d14 <_free_r+0x80>
 8000d0e:	230c      	movs	r3, #12
 8000d10:	6003      	str	r3, [r0, #0]
 8000d12:	e7d3      	b.n	8000cbc <_free_r+0x28>
 8000d14:	6825      	ldr	r5, [r4, #0]
 8000d16:	1961      	adds	r1, r4, r5
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	bf04      	itt	eq
 8000d1c:	6819      	ldreq	r1, [r3, #0]
 8000d1e:	685b      	ldreq	r3, [r3, #4]
 8000d20:	6063      	str	r3, [r4, #4]
 8000d22:	bf04      	itt	eq
 8000d24:	1949      	addeq	r1, r1, r5
 8000d26:	6021      	streq	r1, [r4, #0]
 8000d28:	6054      	str	r4, [r2, #4]
 8000d2a:	e7c7      	b.n	8000cbc <_free_r+0x28>
 8000d2c:	b003      	add	sp, #12
 8000d2e:	bd30      	pop	{r4, r5, pc}
 8000d30:	20000084 	.word	0x20000084

08000d34 <_malloc_r>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	1ccd      	adds	r5, r1, #3
 8000d38:	f025 0503 	bic.w	r5, r5, #3
 8000d3c:	3508      	adds	r5, #8
 8000d3e:	2d0c      	cmp	r5, #12
 8000d40:	bf38      	it	cc
 8000d42:	250c      	movcc	r5, #12
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	4606      	mov	r6, r0
 8000d48:	db01      	blt.n	8000d4e <_malloc_r+0x1a>
 8000d4a:	42a9      	cmp	r1, r5
 8000d4c:	d903      	bls.n	8000d56 <_malloc_r+0x22>
 8000d4e:	230c      	movs	r3, #12
 8000d50:	6033      	str	r3, [r6, #0]
 8000d52:	2000      	movs	r0, #0
 8000d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d56:	f000 f8f1 	bl	8000f3c <__malloc_lock>
 8000d5a:	4921      	ldr	r1, [pc, #132]	; (8000de0 <_malloc_r+0xac>)
 8000d5c:	680a      	ldr	r2, [r1, #0]
 8000d5e:	4614      	mov	r4, r2
 8000d60:	b99c      	cbnz	r4, 8000d8a <_malloc_r+0x56>
 8000d62:	4f20      	ldr	r7, [pc, #128]	; (8000de4 <_malloc_r+0xb0>)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b923      	cbnz	r3, 8000d72 <_malloc_r+0x3e>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f000 f83c 	bl	8000de8 <_sbrk_r>
 8000d70:	6038      	str	r0, [r7, #0]
 8000d72:	4629      	mov	r1, r5
 8000d74:	4630      	mov	r0, r6
 8000d76:	f000 f837 	bl	8000de8 <_sbrk_r>
 8000d7a:	1c43      	adds	r3, r0, #1
 8000d7c:	d123      	bne.n	8000dc6 <_malloc_r+0x92>
 8000d7e:	230c      	movs	r3, #12
 8000d80:	6033      	str	r3, [r6, #0]
 8000d82:	4630      	mov	r0, r6
 8000d84:	f000 f8e0 	bl	8000f48 <__malloc_unlock>
 8000d88:	e7e3      	b.n	8000d52 <_malloc_r+0x1e>
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	1b5b      	subs	r3, r3, r5
 8000d8e:	d417      	bmi.n	8000dc0 <_malloc_r+0x8c>
 8000d90:	2b0b      	cmp	r3, #11
 8000d92:	d903      	bls.n	8000d9c <_malloc_r+0x68>
 8000d94:	6023      	str	r3, [r4, #0]
 8000d96:	441c      	add	r4, r3
 8000d98:	6025      	str	r5, [r4, #0]
 8000d9a:	e004      	b.n	8000da6 <_malloc_r+0x72>
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	42a2      	cmp	r2, r4
 8000da0:	bf0c      	ite	eq
 8000da2:	600b      	streq	r3, [r1, #0]
 8000da4:	6053      	strne	r3, [r2, #4]
 8000da6:	4630      	mov	r0, r6
 8000da8:	f000 f8ce 	bl	8000f48 <__malloc_unlock>
 8000dac:	f104 000b 	add.w	r0, r4, #11
 8000db0:	1d23      	adds	r3, r4, #4
 8000db2:	f020 0007 	bic.w	r0, r0, #7
 8000db6:	1ac2      	subs	r2, r0, r3
 8000db8:	d0cc      	beq.n	8000d54 <_malloc_r+0x20>
 8000dba:	1a1b      	subs	r3, r3, r0
 8000dbc:	50a3      	str	r3, [r4, r2]
 8000dbe:	e7c9      	b.n	8000d54 <_malloc_r+0x20>
 8000dc0:	4622      	mov	r2, r4
 8000dc2:	6864      	ldr	r4, [r4, #4]
 8000dc4:	e7cc      	b.n	8000d60 <_malloc_r+0x2c>
 8000dc6:	1cc4      	adds	r4, r0, #3
 8000dc8:	f024 0403 	bic.w	r4, r4, #3
 8000dcc:	42a0      	cmp	r0, r4
 8000dce:	d0e3      	beq.n	8000d98 <_malloc_r+0x64>
 8000dd0:	1a21      	subs	r1, r4, r0
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	f000 f808 	bl	8000de8 <_sbrk_r>
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d1dd      	bne.n	8000d98 <_malloc_r+0x64>
 8000ddc:	e7cf      	b.n	8000d7e <_malloc_r+0x4a>
 8000dde:	bf00      	nop
 8000de0:	20000084 	.word	0x20000084
 8000de4:	20000088 	.word	0x20000088

08000de8 <_sbrk_r>:
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4d06      	ldr	r5, [pc, #24]	; (8000e04 <_sbrk_r+0x1c>)
 8000dec:	2300      	movs	r3, #0
 8000dee:	4604      	mov	r4, r0
 8000df0:	4608      	mov	r0, r1
 8000df2:	602b      	str	r3, [r5, #0]
 8000df4:	f7ff faa8 	bl	8000348 <_sbrk>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_sbrk_r+0x1a>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_sbrk_r+0x1a>
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	20000098 	.word	0x20000098

08000e08 <__sread>:
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e10:	f000 f8a0 	bl	8000f54 <_read_r>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	bfab      	itete	ge
 8000e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e1c:	181b      	addge	r3, r3, r0
 8000e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e22:	bfac      	ite	ge
 8000e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e26:	81a3      	strhlt	r3, [r4, #12]
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <__swrite>:
 8000e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2e:	461f      	mov	r7, r3
 8000e30:	898b      	ldrh	r3, [r1, #12]
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	4605      	mov	r5, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	4616      	mov	r6, r2
 8000e3a:	d505      	bpl.n	8000e48 <__swrite+0x1e>
 8000e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e40:	2302      	movs	r3, #2
 8000e42:	2200      	movs	r2, #0
 8000e44:	f000 f868 	bl	8000f18 <_lseek_r>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e52:	81a3      	strh	r3, [r4, #12]
 8000e54:	4632      	mov	r2, r6
 8000e56:	463b      	mov	r3, r7
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e5e:	f000 b817 	b.w	8000e90 <_write_r>

08000e62 <__sseek>:
 8000e62:	b510      	push	{r4, lr}
 8000e64:	460c      	mov	r4, r1
 8000e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e6a:	f000 f855 	bl	8000f18 <_lseek_r>
 8000e6e:	1c43      	adds	r3, r0, #1
 8000e70:	89a3      	ldrh	r3, [r4, #12]
 8000e72:	bf15      	itete	ne
 8000e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e7e:	81a3      	strheq	r3, [r4, #12]
 8000e80:	bf18      	it	ne
 8000e82:	81a3      	strhne	r3, [r4, #12]
 8000e84:	bd10      	pop	{r4, pc}

08000e86 <__sclose>:
 8000e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e8a:	f000 b813 	b.w	8000eb4 <_close_r>
	...

08000e90 <_write_r>:
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4d07      	ldr	r5, [pc, #28]	; (8000eb0 <_write_r+0x20>)
 8000e94:	4604      	mov	r4, r0
 8000e96:	4608      	mov	r0, r1
 8000e98:	4611      	mov	r1, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	602a      	str	r2, [r5, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f7ff fa01 	bl	80002a6 <_write>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_write_r+0x1e>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_write_r+0x1e>
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	20000098 	.word	0x20000098

08000eb4 <_close_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d06      	ldr	r5, [pc, #24]	; (8000ed0 <_close_r+0x1c>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	602b      	str	r3, [r5, #0]
 8000ec0:	f7ff fa0d 	bl	80002de <_close>
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	d102      	bne.n	8000ece <_close_r+0x1a>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	b103      	cbz	r3, 8000ece <_close_r+0x1a>
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	20000098 	.word	0x20000098

08000ed4 <_fstat_r>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4d07      	ldr	r5, [pc, #28]	; (8000ef4 <_fstat_r+0x20>)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	602b      	str	r3, [r5, #0]
 8000ee2:	f7ff fa08 	bl	80002f6 <_fstat>
 8000ee6:	1c43      	adds	r3, r0, #1
 8000ee8:	d102      	bne.n	8000ef0 <_fstat_r+0x1c>
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	b103      	cbz	r3, 8000ef0 <_fstat_r+0x1c>
 8000eee:	6023      	str	r3, [r4, #0]
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000098 	.word	0x20000098

08000ef8 <_isatty_r>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4d06      	ldr	r5, [pc, #24]	; (8000f14 <_isatty_r+0x1c>)
 8000efc:	2300      	movs	r3, #0
 8000efe:	4604      	mov	r4, r0
 8000f00:	4608      	mov	r0, r1
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	f7ff fa07 	bl	8000316 <_isatty>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d102      	bne.n	8000f12 <_isatty_r+0x1a>
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	b103      	cbz	r3, 8000f12 <_isatty_r+0x1a>
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	20000098 	.word	0x20000098

08000f18 <_lseek_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4d07      	ldr	r5, [pc, #28]	; (8000f38 <_lseek_r+0x20>)
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4611      	mov	r1, r2
 8000f22:	2200      	movs	r2, #0
 8000f24:	602a      	str	r2, [r5, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	f7ff fa00 	bl	800032c <_lseek>
 8000f2c:	1c43      	adds	r3, r0, #1
 8000f2e:	d102      	bne.n	8000f36 <_lseek_r+0x1e>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	b103      	cbz	r3, 8000f36 <_lseek_r+0x1e>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	20000098 	.word	0x20000098

08000f3c <__malloc_lock>:
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <__malloc_lock+0x8>)
 8000f3e:	f7ff be43 	b.w	8000bc8 <__retarget_lock_acquire_recursive>
 8000f42:	bf00      	nop
 8000f44:	20000091 	.word	0x20000091

08000f48 <__malloc_unlock>:
 8000f48:	4801      	ldr	r0, [pc, #4]	; (8000f50 <__malloc_unlock+0x8>)
 8000f4a:	f7ff be3e 	b.w	8000bca <__retarget_lock_release_recursive>
 8000f4e:	bf00      	nop
 8000f50:	20000091 	.word	0x20000091

08000f54 <_read_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d07      	ldr	r5, [pc, #28]	; (8000f74 <_read_r+0x20>)
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	602a      	str	r2, [r5, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff f982 	bl	800026c <_read>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_read_r+0x1e>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_read_r+0x1e>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	20000098 	.word	0x20000098

08000f78 <_init>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

08000f84 <_fini>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr
