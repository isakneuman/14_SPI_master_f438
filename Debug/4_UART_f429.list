
4_UART_f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103cc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004ec  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000164  00000000  00000000  000108e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a298  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000056d  00000000  00000000  0002ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009337c  00000000  00000000  0002b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000be679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  000be6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003ac 	.word	0x080003ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003ac 	.word	0x080003ac

080001ec <main>:
void	uart1_write(uint16_t ch);

static 	uint16_t	uart_div(uint32_t PeriphClk, uint32_t BaudRate);

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	uart1_tx_init();
 80001f0:	f000 f814 	bl	800021c <uart1_tx_init>
	while(1)
	{
		uart1_write('S');
 80001f4:	2053      	movs	r0, #83	; 0x53
 80001f6:	f000 f85f 	bl	80002b8 <uart1_write>
		uart1_write('A');
 80001fa:	2041      	movs	r0, #65	; 0x41
 80001fc:	f000 f85c 	bl	80002b8 <uart1_write>
		uart1_write('G');
 8000200:	2047      	movs	r0, #71	; 0x47
 8000202:	f000 f859 	bl	80002b8 <uart1_write>
		uart1_write('I');
 8000206:	2049      	movs	r0, #73	; 0x49
 8000208:	f000 f856 	bl	80002b8 <uart1_write>
		uart1_write('\r');
 800020c:	200d      	movs	r0, #13
 800020e:	f000 f853 	bl	80002b8 <uart1_write>
		uart1_write('\n');
 8000212:	200a      	movs	r0, #10
 8000214:	f000 f850 	bl	80002b8 <uart1_write>
		uart1_write('S');
 8000218:	e7ec      	b.n	80001f4 <main+0x8>
	...

0800021c <uart1_tx_init>:
	}
}

void 	uart1_tx_init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	/*	Set PA9 mode to alternate function mode
	 * 	for TX on UART1
	 */
	RCC->AHB1ENR	|=	RCC_AHB1ENR_GPIOAEN;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <uart1_tx_init+0x8c>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <uart1_tx_init+0x8c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 mode to alternate function mode*/
	GPIOA->MODER	|=	GPIO_MODER_MODE9_1;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <uart1_tx_init+0x90>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <uart1_tx_init+0x90>)
 8000232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	&=	~GPIO_MODER_MODE9_0;
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <uart1_tx_init+0x90>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <uart1_tx_init+0x90>)
 800023e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000242:	6013      	str	r3, [r2, #0]

	/*Set PA9 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH1_0;
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <uart1_tx_init+0x90>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <uart1_tx_init+0x90>)
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH1_1;
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <uart1_tx_init+0x90>)
 8000252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <uart1_tx_init+0x90>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	|=	GPIO_AFRH_AFRH1_2;
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <uart1_tx_init+0x90>)
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	4a12      	ldr	r2, [pc, #72]	; (80002ac <uart1_tx_init+0x90>)
 8000262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000266:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]	&=	~GPIO_AFRH_AFRH1_3;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <uart1_tx_init+0x90>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800026c:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <uart1_tx_init+0x90>)
 800026e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000272:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock access to uart1*/
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <uart1_tx_init+0x8c>)
 8000276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <uart1_tx_init+0x8c>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Configure baudrate*/
	USART1->BRR		=	uart_div(APB1, BAUDRATE);
 8000280:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <uart1_tx_init+0x94>)
 8000286:	f000 f82f 	bl	80002e8 <uart_div>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <uart1_tx_init+0x98>)
 8000290:	609a      	str	r2, [r3, #8]

	/*Configure the TX*/
	USART1->CR1		=	USART_CR1_TE;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <uart1_tx_init+0x98>)
 8000294:	2208      	movs	r2, #8
 8000296:	60da      	str	r2, [r3, #12]

	/*Enable USART1*/
	USART1->CR1		|=	USART_CR1_UE;
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <uart1_tx_init+0x98>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <uart1_tx_init+0x98>)
 800029e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a2:	60d3      	str	r3, [r2, #12]
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000
 80002b0:	00f42400 	.word	0x00f42400
 80002b4:	40011000 	.word	0x40011000

080002b8 <uart1_write>:

void 	uart1_write(uint16_t ch)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
	/*Make sure the transmit data register is empty*/
	while( !(USART1->SR & USART_SR_TXE) );
 80002c2:	bf00      	nop
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <uart1_write+0x2c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <uart1_write+0xc>
	/*Write to transmit data register*/
	USART1->DR	=	(ch & 0xFF);
 80002d0:	88fb      	ldrh	r3, [r7, #6]
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <uart1_write+0x2c>)
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	6053      	str	r3, [r2, #4]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40011000 	.word	0x40011000

080002e8 <uart_div>:

static 	uint16_t	uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	return ( (PeriphClk + (BaudRate/2U))/BaudRate );
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	085a      	lsrs	r2, r3, #1
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	441a      	add	r2, r3
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000300:	b29b      	uxth	r3, r3
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff53 	bl	80001ec <main>

08000346 <LoopForever>:

LoopForever:
    b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	; (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	; (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
